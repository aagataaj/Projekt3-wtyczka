# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wtyczka_projekt_3Dialog
                                 A QGIS plugin
 Wtyczka liczy różne rzeczy. To jest przewyższenie między dwoma punktami i pole wieloboku opartego na wskazanych puntkach
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Agata Jakubiak
        email                : 01159913@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from qgis.core import QgsWkbTypes, QgsVectorLayer, QgsVectorFileWriter, QgsProject, Qgis
import numpy as np

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wtyczka_proj_3_dialog_base.ui'))


class wtyczka_projekt_3Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(wtyczka_projekt_3Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pushButtonPokazAW.clicked.connect(self.aktywna_warstwa)
        self.pushButtonPokazP.clicked.connect(self.punkty)
        self.pushButtonOblicz.clicked.connect(self.liczenie)
        self.pushButtonWyczysc.clicked.connect(self.czysc)
        
    def aktywna_warstwa(self):
        aktywna_warstwa = iface.activeLayer()
        self.labelAktywnaWarstwa.setText(str(aktywna_warstwa.name()))
        
    def punkty(self):
        warstwa = iface.activeLayer()
        wybrane = warstwa.selectedFeatures()
        liczba = 0
        for punkty in wybrane:
            liczba += 1
        self.labelLiczbaPunkow.setText(f'{liczba}')
        atrybuty = np.zeros((liczba,4))
        for i in range(0,liczba):
            atrybuty[i] = wybrane[i].attributes()
            self.textEdit.append(f'Nr: {atrybuty[i,0]:.0f} XY: {atrybuty[i,1]:.3f}  {atrybuty[i,2]:.3f} h: {atrybuty[i,3]:.3f}')
    
    # def przewyzszenie(self):
    #     warstwa = iface.activeLayer()
    #     wybrane = warstwa.selectedFeatures()
    #     atrybuty2 = wybrane[1].attributes()
    #     atrybuty1 = wybrane[0].attributes()
    #     h2 = atrybuty2[3]
    #     h1 = atrybuty1[3]
    #     przewyzszenie = h2 - h1
    #     self.labelOpisWyniku.setText('Przewyższenie między punktami wynosi:')
    #     self.labelWyniki.setText(f'{przewyzszenie:.3f}')
            
    def czysc(self):
        self.labelLiczbaPunkow.setText('')
        self.textEdit.setText('')
        self.labelOpisWyniku.setText('')
        self.labelWynik.setText('')
        self.labelAktywnaWarstwa.setText('')
     
    # def pole(self):
    #     warstwa = iface.activeLayer()
    #     wybrane = warstwa.selectedFeatures()
    #     liczba = 0
    #     for punkty in wybrane:
    #         liczba += 1
    #     punkty = np.zeros((liczba,4))
    #     for i in range(0,liczba):
    #         punkty[i] = wybrane[i].attributes()
    #     p = []
    #     try:
    #         for i in range(len(punkty)):
    #             s = (punkty[i+1,1] - punkty[i-1,1]) * punkty[i,2]
    #             p.append(s)
    #     except IndexError:
    #         s = (punkty[0,1] - punkty[i-1,1]) * punkty[i,2] 
    #         p.append(s)
    #     pole = -sum(p)/2
    #     self.labelOpisWyniku.setText('Pole wynosi:')
    #     self.labelWyniki.setText(f'{pole:.3f}')
        
        
    def liczenie(self):
        warstwa = iface.activeLayer()
        wybrane = warstwa.selectedFeatures()
        liczba = 0
        for punkty in wybrane:
            liczba += 1
        if liczba == 1:
            self.labelOpisWyniku.setText('Wybrano za mało punktów!')
        elif liczba == 2:
            atrybuty2 = wybrane[1].attributes()
            atrybuty1 = wybrane[0].attributes()
            h2 = atrybuty2[3]
            h1 = atrybuty1[3]
            przewyzszenie = h2 - h1
            self.labelOpisWyniku.setText('Przewyższenie między punktami wynosi:')
            self.labelWynik.setText(f'{przewyzszenie:.3f}')
            iface.messageBar().pushMessage(f'Różnica wysokoci między punktami o numerach {atrybuty1[0]:.0f} i {atrybuty2[0]:.0f} wynosi {przewyzszenie:.3f}.')
        elif liczba > 2: 
            punkty = np.zeros((liczba,4))
            for i in range(0,liczba):
                punkty[i] = wybrane[i].attributes()
            p = []
            try:
                for i in range(len(punkty)):
                    s = (punkty[i+1,1] - punkty[i-1,1]) * punkty[i,2]
                    p.append(s)
            except IndexError:
                s = (punkty[0,1] - punkty[i-1,1]) * punkty[i,2] 
                p.append(s)
            pole = -sum(p)/2
            if self.radioButtonm2.isChecked():
                pole = pole
                jednostka = 'm2'
            elif self.radioButtonkm2.isChecked():
                pole = pole/(10**6)
                jednostka = 'km2'
            elif self.radioButtona.isChecked():
                pole = pole/100
                jednostka = 'a'
            elif self.radioButtonha.isChecked():
                pole = pole/10000
                jednostka = 'ha'
            self.labelOpisWyniku.setText('Pole wynosi:')
            self.labelWynik.setText(f'{pole:.3f} {jednostka}')
            nr_punktow = ''
            for n in range(len(punkty)):
                nr_punktow = nr_punktow + ', ' + f'{punkty[n,0]:.0f}'
            iface.messageBar().pushMessage(f'Pole powierzchni figury o wierzchołkach w punktach o numerach: {nr_punktow} wynosi: {pole:.3f} {jednostka}.')
        elif liczba == 0:
            self.labelOpisWyniku.setText('Nie wybrano żadnego punktu')

        
        
        
        